Exporting layers:
Using Overpass api: https://wiki.openstreetmap.org/wiki/Overpass_API/Language_Guide#Overpass_QL_Basics

Pubs query:  Run in Overpass-turbo to export as geojson

old broad bbox:   (51.3276,-0.2369,51.5173,0.1559);

current restricted: (51.3988,-0.1023,51.4719,0.0215)

(node
  [amenity=pub]
  (51.3988,-0.1023,51.4719,0.0215);
way
  [amenity=pub]
  (51.3988,-0.1023,51.4719,0.0215);
rel
  [amenity=pub]
  (51.3988,-0.1023,51.4719,0.0215);
);
(._;>;);
out;

  ({{bbox}});


Need to use geopandas to convert them all to points before importing to layer?


Train station query: same as above, just change the tags
  railway=stop
(node
  [railway~"stop|station"]
  (51.3276,-0.2369,51.5173,0.1559);
way
  [railway~"stop|station"]
  (51.3276,-0.2369,51.5173,0.1559);
rel
  [railway~"stop|station"]
  (51.3276,-0.2369,51.5173,0.1559);
);
(._;>;);
out;


Shop:
(
  node[shop~"supermarket|convenience"][name  ~ "Sainsbury|Tesco|Co-op|Budgens|Waitrose|M&S Foodhall|Aldi|Lidl|Asda"]({{bbox}});
  node[shop~"supermarket|convenience"][brand ~ "Sainsbury|Tesco|Co-op|Budgens|Waitrose|M&S Foodhall|Aldi|Lidl|Asda"]({{bbox}});
  way [shop~"supermarket|convenience"][name  ~ "Sainsbury|Tesco|Co-op|Budgens|Waitrose|M&S Foodhall|Aldi|Lidl|Asda"]({{bbox}});
  way [shop~"supermarket|convenience"][brand ~ "Sainsbury|Tesco|Co-op|Budgens|Waitrose|M&S Foodhall|Aldi|Lidl|Asda"]({{bbox}});
  rel [shop~"supermarket|convenience"][name  ~ "Sainsbury|Tesco|Co-op|Budgens|Waitrose|M&S Foodhall|Aldi|Lidl|Asda"]({{bbox}});
  rel [shop~"supermarket|convenience"][brand ~ "Sainsbury|Tesco|Co-op|Budgens|Waitrose|M&S Foodhall|Aldi|Lidl|Asda"]({{bbox}});
);
(._;>;);
out;


Parks query:
  May be able to use the above strategy, but will need to tweak opacity since the bounding points of the parks build on each other.
  Can we do it with entrances?
    leisure=park

(
  node[leisure=park]({{bbox}});
  way [leisure=park]({{bbox}});
  rel [leisure=park]({{bbox}});
);
(._;>;);
out;



(node[amenity=pub](51.3988,-0.1023,51.4719,0.0215););(._;>;);out;

TODO:
- Get data from overpass api dynamically
  - Store query for each data layer
  - Get bbox from map and move them out by twice (arbitrary guess) the radius specified.
  - insert buffered bbox coords into the query
  - URL sanitize query: Remove spaces and convert special chars
  - Make request
  - when returned, convert response to geojson with osmtogeojson
  - Add buffer using turfjs
  - merge buffered shapes using turfjs
  - add layer if doesn't exist, otherwise setData.

http://www.overpass-api.de/api/interpreter?data=%28node%5B%22amenity%22%3D%22pub%22%5D%2851%2E3988%2C%2D0%2E1023%2C51%2E4719%2C0%2E0215%29%3B%29%3B%28%2E%5F%3B%3E%3B%29%3Bout%3B%0A





